# -*- coding: utf-8 -*-
"""DetectingHeartDiseasewithLogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tWyHIS6O1e_SHTXct7RvxtOQ8SJaAJYT
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression


data = pd.read_csv("Dataset/heart.csv")

data.head()

X = data.drop("HeartDisease", axis=1)
y = data["HeartDisease"]
categories = {
    'ChestPainType': ['ATA', 'NAP', 'ASY', 'TA'],
    'Sex': ['M', 'F'],
    'RestingECG': ['Normal', 'ST', 'LVH'],
    'ExerciseAngina': ['N', 'Y'],
    'ST_Slope': ['Up', 'Flat', 'Down']
}
X = pd.get_dummies(X, columns=categories.keys())
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)
logistic_classifier = LogisticRegression()
logistic_classifier.fit(X_train,y_train)
def get_user_input():
  age = int(input("Enter age:"))
  sex = input("Enter Sex (M/F):").upper()
  chest_pain_type = input("Enter Chest Paint Type (ATA/NAP/ASY/TA):")
  resting_bp = int(input("Enter resting blood pressure:"))
  cholesterol = int(input("Enter choletesrol"))
  fasting_bs = int(input("Enter fasting blood sugar:"))
  resting_ecg = input("Enter Resting ECG (Normal/ST/LVH):")
  max_hr = int(input("Enter max heart rate:"))
  exercise_angina = input("Enter Exercise Angina (N/Y):")
  oldpeak = float(input("Enter Oldpeak:"))
  st_slope = input("Enter ST Slope (Up/Flat/Down)")

  return {
      "Age": age,
      "Sex": sex,
      "ChestPainType": chest_pain_type,
      "RestingBP": resting_bp,
      "Cholesterol": cholesterol,
      "FastingBS": fasting_bs,
      "RestingECG": resting_ecg,
      "MaxHR": max_hr,
      "ExerciseAngina": exercise_angina,
      "Oldpeak": oldpeak,
      "ST_Slope": st_slope
  }

patient_data = get_user_input()
patient_df = pd.DataFrame([patient_data])
patient_df = pd.get_dummies(patient_df, columns=categories.keys())
missing_features = set(X_train.columns) - set(patient_df.columns)
for feature in missing_features:
  patient_df[feature] = 0
patient_df = patient_df[X_train.columns]
prediction = logistic_classifier.predict(patient_df)
if prediction[0] == 1:
  print("Heart Disease Detected")
else:
  print("Normal")